//////////////////////////
// LOGO
.logo {
    height: 3.25rem;
    margin-left: 2rem;
}

//////////////////////////
// SERCH
.serch {
    flex: 0 0 40%;

    display: flex;
    align-items: center;
    justify-content: center;

    @media only screen and (max-width: $bp-smallest) { // $bp-smallest=500px
        order: 1; // all flex box has order number 0. if you wish swap boxes, you van do it by using order to re-number them. In this example, we want to move the serch box, which is in the middle of flex, to the last one of the flex roll. the re-oder would be 0 0 0 0 0 1(serch box)
        flex: 0 0 100%; // and the flex basis should grow to 100% as soon as it hits the bp 500px
       // background-color: var(--color-grey-light-2); could also be added to make the serch bar look better. I dont think so!
    }

    &__input {
        font-family: inherit;
        font-size: inherit;
        color: inherit;
        background-color: var(--color-grey-light-2);
        border: none;
        padding: .7rem 2rem;
        border-radius: 10rem;
        width: 90%;
        transition: all .2s;
        margin-right: -3.25rem;

        &:focus {
            outline: none;
            width: 100%;
            background-color: var(--color-grey-light-3);
        }
        //&::input-placeholder is this you must add -webkit- for browser!
        &::-webkit-input-placeholder {
            //font-size, is this case, is inherited from input (should originally inherite from global setting in html), but the font-size is set at 1.4 in header(the parent of class=header. So it is 1.4rem
            font-weight: 100;
            color: var(color-grey-light-4);
        }
    }

    //using adjacent psuedo selector to select the button which a sibling of input (child of serch) as it on fucused!
    &__input:focus + &__button {
        background-color: var(--color-grey-light-3);
    }

    &__button {
        border: none;
        background-color: var(--color-grey-light-2);
        &:focus {
            outline: none;
        }
    }
    &__icon {
        height: 2rem;
        width: 2rem;
        //using fill; to fill color into .svg icon
        fill: var(--color-primary-dark);
    }
}
//////////////////////////
// USER NAVIGATION
.user-nav {
    align-self: stretch;

    //display-flex and align item in user-nav at the center
    display: flex;
    align-items: center;

    //making the same action, at the same time,for icon-box & user, which are both the children of user-nav by grouping them(shown bolow)
    & > * { // selector for user-nav and all of it direct children
       padding: 0 2rem;
       cursor: pointer;
       height: 100%; // to set the bg-color to 100% and also when hovered!
       display: flex;
       align-items: center;
    }    
       
    //however, the bg wont fill up the whole bg space of its section. Becaue, the user-nav is still set to align-item: center with the header alighment. So you have to over-ride at user-nav its self by setting align-self to stretch!
    & > *:hover { //select them again with the hover
        background-color: var(--color-grey-light-2);
    }

    &__icon-box {
        /*display: flex;
        align-items: center; */
        // as the high in user-nav is set to 100% (when hovered). The items in icon-box go higher with the bg. So the item must be set to center too. However, since you need to reset the user as well you can do it with all the children of user-nav & > * above!

        position: relative;
    }
    &__icon {
        height: 2.25rem;
        width: 2.25rem;
        //selecting pink in color-primary-dark is just to put a spotlight on the icon.svg
        fill: var(--color-primary-dark);

        position: relative;
    }
    &__notification { // little spotty box next to the icon!
        font-size: .8rem;
        height: 1.75rem;
        width: 1.75rem;
        border-radius: 50%;
        background-color: var(--color-primary);
        color: #fff;
        
        position: absolute; // need to be absolute with the icon and the parent (icon) should be set to relative in icon-box as well. Then you can start positioning them exactly where you want them! below
        top: 1rem;
        right: 1rem;
        //now display: flex again to position the number inside these 2 spotty boxes(notification)
        display: flex;
        justify-content: center; //horizontally ---
        align-items: center; // vertically       I
    }
    &__user {}
    &__user-photo {
        height: 3.75rem;
        border-radius: 50%;
    }
    &__user-name {
        margin-left: 1rem;
    }
}

///////////////////////////////
// SIDE NAVIGATION
.side-nav {
    font-size: 1.4rem;
    list-style: none;
    margin-top: 3.5rem;

    @media only screen and (max-width: $bp-medium) { // $bp-largest=900px
        display: flex;
        margin: 0;
    }

    &__item {
       position: relative;

       @media only screen and (max-width: $bp-medium) { // $bp-largest=900px
        flex: 1; // change items layout to flex 1(grown), to let them spread out evenly in the whole avalible space
    }

       // psuedo all but not last child selector!
       &:not(:last-child) {
        margin-bottom: .5rem;

        @media only screen and (max-width: $bp-medium) { // $bp-largest=900px
            margin: 0;
        }
       }
    }

    &__item::before {
        content: ""; // content is built empthy ""here as to form the transformation afx roll from left to right
        position: absolute;
        top: 0;
        left: 0;
        height: 100%;
        width: 3px;
        background-color: var(--color-primary);
       /* transform-origin: bottom; will start the transform from the bottom. The default is set from the center*/
        transform: scaleY(0);
        transition: transform .2s, width .4s cubic-bezier(1,0,0,1) .2s;/* 100% in .4s & cubic-bezier delay motion*/
        /*background-color .1s*/
        
    } 
    //the transform: scaleY stays at (0) 
    //once the it hovered the transition: transform begin in scaleY (vertical) and it turns to scale (1)
    // The action shoulld begin before you hover
    &__item:hover::before,
    &__item--active::before { //after adding active modifier in html. You need to active state as it happens at the same time as hover state
        transform: scaleY(1);
        //after transforming it should grow to 100% of the width to the other side by setting the width of 100%
        width: 100%;
    }

    &__item:active::before {
        background-color: var(--color-primary-light); // once it clicked, the bg-color changes as well!
    }


    &__link:link,
    &__link:visited {
       color: var(--color-grey-light-1);
       text-decoration: none;
       text-transform: uppercase;
       display: block;
       padding: 1.5rem 3rem;
       //once the link is visited and covered by the afx roll so have to set z-index to change the layer of the font above the afx in order to be able to see the font again by the setting (below)
       position: relative;
       z-index: 10; 

       //aligning items in flex and set them to center
       display: flex;
       align-items: center;

       @media only screen and (max-width: $bp-medium) { // $bp-largest=900px
        justify-content: center; // also justify the content inside the items to align center straight in a middle
        padding: 2rem; // just make it a little bit thicker
       }

       @media only screen and (max-width: $bp-small) { // $bp-small=600px
        flex-direction: column;
        padding: 1.5rem .5rem; //the reson to change the padding is that the icons are pushed to the side even they are set in the center. That is flex!
       }
    }

    &__icon {
        width: 1.75rem;
        height: 1.75rem;
        margin-right: 2rem;
        fill: currentColor; //currentColor in fill means the item inherit the current color from its parent. In this case, color-grey-light-1 is the color of link above!

        @media only screen and (max-width: $bp-small) { // $bp-small=600px
            margin-right: 0;
            margin-bottom: .7rem;
            width: 1.5rem;
            height: 1.5rem;
        }
    }
}

//////////////////////////
// LEGAL TEXT
.legal {
    font-size: 1.2rem;
    color: var(--color-grey-light-4);
    text-align: center;
    padding: 2.5rem;

    @media only screen and (max-width: $bp-medium) { // $bp-largest=900px
        display: none;
    }
}

/////////////////////////
//GALLERY
.gallery {
    display: flex;

    &__photo {
        width: 100%; //note! height&width of img should always be in % in order to keep it fluid in responsive design!
        display: block;
    }
}

////////////////////////
//GALLERY
.overview {
    display: flex;
    align-items: center; // aligning items in overview to a straight line!
    border-bottom: var(--line);
    


    &__heading {
        font-size: 2.25rem;
        font-weight: 300;
        text-transform: uppercase;
        letter-spacing: 1px;
        padding: 1.5rem 3rem; // top-bottom left-right

        @media only screen and (max-width: $bp-small) { // $bp-small=600px
        font-size: 1.8rem;
        padding: 1.25rem 2rem;
        }
    }
    &__stars {
        display: flex; //details work! instead of setting stars as inline-block or block, setting display: flex to make sure that th svg icon sit tight together to the perfect roll better inline!
        margin-right: auto;//note:trick using margin-right: to expand the space of stars  to split the items to both end. If you dont need any space in the middle of overview. Other option won't work!!!
        background-color: var(--color-grey-light-2);
        //pick background is set up as a demo of how margin-right: auto stretch out to!
    }
    &__icon-star,//icon-star & location are added in html. you can color them directly with fill. Unlike the chevron-thin, is added via css. 
    &__icon-location {
        width: 1.75rem;
        height: 1.75rem;
        fill: var(--color-primary);
    }
    &__location {
        font-size: 1.2rem;
        display: flex;
        vertical-align: center;
    }
    &__icon-location {
        margin-right: 0.5rem; //seperated from icon-start property just to move the icon away from the letter. Detail positioning!
    }

    &__rating {
        background-color: var(--color-primary);
        color: #fff;
        margin-left: 3rem;
        padding: 0 2.25rem;
        align-self: stretch; //aligning overview__rating override self out of overview set up aligning:center to align-self: stretch!
        display: flex;
        flex-direction: column; //after display: flex. It turns to flex-roll by default. Flex-direction: column setting thme to vertical!
        align-items: center; //positioning x-y: cenrter!
        justify-content: center;

        @media only screen and (max-width: $bp-small) { // $bp-small=600px
        padding: 0 1.5rem;
        }
    }
    &__rating-average {
        font-size: 2.25rem;
        font-weight: 300;
        margin-bottom: -3px;

        @media only screen and (max-width: $bp-small) { // $bp-small=600px
        font-size: 1.8rem;
        }
    }

    &__rating-count {
        font-size: .8rem;
        text-transform: uppercase;

        @media only screen and (max-width: $bp-small) { // $bp-small=600px
            font-size: .5rem;
        }
    }

}

/////////////////////////
//BUTTON INLINE
.btn-inline {
    border: none;
    color: var(--color-primary);
    font-size: inherit; // AS reuse your code philosophy, both font-size & border-color are inherit from the current used one in its parent. 
    border-bottom: 1px solid currentColor;
    padding-bottom: 2px;
    display: inline-block;
    background-color: transparent;
    cursor: pointer;
    transition: all .2s;

    // there are 2 inline-button. This one with a span:arrow in it is on the bottom of the review box and it needs a little bit of a styling. It must also be positioned at the bottom center of the box! You need to do it at its parent element (user-review in the layout)
    & span {
        margin-left: 3px;
        transition: margin-left .2s;
    }

    &:hover {
        color: var(--color-grey-dark-1);

        // as soon as you hover the span the margin-left will change to 8px. So the arrow move to the right!
        & span {
            margin-left: 8px;
        }
    }

    &:focus {
        outline: none;
        animation: pulsate 1s infinite;
        //infinite loops applied as long as the btn is on the focus state
    }
}

// a little bit of css annimation added to the btn-inline!
@keyframes pulsate {
    0% {
        transform: scale(1);
        box-shadow: none;
    }

    50% {
        transform: scale(1.05);
        box-shadow: 0 1rem 4rem rgba(0,0,0,0.25);
    }

    100% {
        transform: scale(1);
        box-shadow: none;
    }
}

/////////////////////////
// PARAGRAPH
// :not(:last-of-type) = all type but not the last one. In this case it select all the paragraph but not last type, which is a ul.
.paragraph:not(:last-of-type) {
    margin-bottom: 2rem;
}

/////////////////////////
// LIST
.list {
    list-style: none;
    margin: 3rem 0; //3rem=top&bottom 0 to both side!
    border-top: var(--line);
    border: var(--line);

    display: flex; //wrap the list with flex-wrap: wrap. Now they are wrap together in one line. Afterward you can split the into 50/50 with with flex-bassis in list__item
    flex-wrap: wrap;

    @media only screen and (max-width: $bp-smallest) {  // $bp-smallest 500px
       flex-direction: column;
       margin: 1rem 0;
    }

    &__item {
        flex: 0 0 50%; // 0=flex-glow 0=flex-shrink 50%=Flex-bassis
        margin-bottom: .7rem;
    }

    //adding (vector) svg icon in css by using ::before psuedo element (with BG-color as the color you want and use mask-image: url() as mask to look through the icon ) and also more practical to use psuedo element seperate from item. But in 2024 use can just add content: url("/img/name.svg"); direct!
    &__item::before {
        content: ""; //add svg.icon direct url or
        display: inline-block;
        //setting the size to img.svg.icon
        height:1rem;
        width: 1rem;// after the mask-image you can decrease the size of the icon!!!! 
        margin-right: .7rem;

        //however you can put mask-image & mask-size to change the icon as a mask and look through the bg color through the icon!
        background-color: var(--color-primary);
        -webkit-mask-image: url(../img/chevron-thin-right.svg);
        -webkit-mask-size: cover;
        mask-image: url(../img/chevron-thin-right.svg);
        mask-size: cover; //mask-size is a tool, to change color of svg.img, used as a background behinde the svg icon. With it then you can decrease the size of the icon through the mask-size in the BG. Also webkit added for a compatibility to cover all browser
        
    }
}
/////////////////////////
// RECOMMEND
.recommend {
    font-size: 1.3rem;
    color: var(--color-primary);

    display: flex;
    align-items: center;

    @media only screen and (max-width: $bp-smallest) {  // $bp-smallest 500px
        flex-direction: column;
     }

    &__count {
        margin-right: auto; // margin-right: auto; is used again to seperate the 2 items in count(friends---photos) like once used with icon-stars

        @media only screen and (max-width: $bp-medium) {  // $bp-smallest 900px
            margin-bottom: 1.5rem;
            margin-right: 4rem;
         }

        @media only screen and (max-width: $bp-smallest) {  // $bp-smallest 500px
            margin-bottom: 1.5rem;
            margin-right: 0;
         }
    }

    &__friends {
        display: flex;
    }

    &__photo {
        box-sizing: content-box;//box-sizing is set to border-box in html. border-box includes padding & border into the width&height. In this case, i want padding&border to be on top of width&height. So box-sizing must be reset to content-box, which is accually a default of box-sizing!!
        height: 4rem;
        color: #fff;
        width: 4rem;
        border-radius: 50%;

        // annimation added extra to the project. Just for skill testing and also for fun!
        border: 0.3rem solid currentColor;
        position: relative;
        transition: all 0.2s ease-out;
        //seclect all but not the last last -1.5rem to set the photo on one another as a stack 
        &:not(:last-child) {
            margin-right: -2rem;
        }
 
        &:hover {
            color: var(--color-primary);
            transform: scale(1.3);
            z-index: 100;
            border: 0.3rem solid currentColor;
            box-shadow: var(--shadow-dark);
        }
    }
 
    &__friends:hover &__photo:not(:hover) {
        transform: scale(0.9);
    }
 
    &__photo:hover + &__photo:not(:hover) {
        transform: scale(1.2);
    }
}


///////////////////////
// REVIEW SECTION using figure class for img.and text
.review {
    background-color: #fff;
    box-shadow: var(--shadow-light);
    padding: 3rem;
    margin-bottom: 3.5rem;
    //adding position: relative for the postion: absolute in psuedo element!
    position: relative;
    //adding over flow to clip part of setting " quotation icon html entities!
    overflow: hidden;

    @media only screen and (max-width: $bp-medium) { // $bp-largest=900px
        padding: 2rem;
        margin-bottom: 3rem;
    }
    
    
    &__text {
        margin-bottom: 2rem;

        //z-index added for the layer above "left icon
        z-index: 10;
        position: relative; // positioning always come with added z-index
    }
    &__user { // photo-user-box-user-name-date-rating are inside figaption class: display flex and aligning them into a straight line
        display: flex;
        align-items: center;
    }
    &__photo {
        height: 4.5rem;
        width: 4.5rem;
        border-radius: 50%;
        margin-right: 1.5rem;
    }
    &__user-box { // user-name-date are sitting inside user-box. declair margin-right auto is to expand for all the space to the right and push rating to flexend on the left.
        margin-right: auto;
    }
    &__user-name { //but user-name-date are sitting on top of each other. because they are on flex. They are inside user-box.
        font-size: 1.1rem;
        font-weight: 600;
        text-transform: uppercase;
        margin-bottom: .4rem;
    }
    &__user-date {
        font-size: 1rem;
        color: var(--color-grey-dark-3);
    }
    &__rating {
        color: var(--color-primary);
        font-size: 2.2rem;
        font-weight: 300;
    }
    
    // using psuedo element to select the content with html entities, by using ISOnum to add in css,to build big light grey "quotation" on top left of the review box! 
    &::before {
        content: "\201C";
        position: absolute; // again! don't forget to add position: relative in its parent too!
        top: -2.75rem; // positioning over the corner-left 
        left: -1rem;
        line-height: 1; //to keep the size not to expand with the line-high of the box element.
        font-size: 20rem;
        color: var(--color-grey-light-2);
        font-family: sans-serif; // to reset free from set up in root html
        z-index: 1; // to keep the quotation " under the text in the element. the z-index must also be set at the text, with position relative too!
    }
}

///////////////////////
// CALL TO ACTION CTA
.cta {
    padding: 3.5rem 0;
    text-align: center;

    @media only screen and (max-width: $bp-medium) { // $bp-largest=900px
        padding: 2.5rem 0;
    }

    &__book-now {
        font-size: 2rem;
        font-weight: 300;
        text-transform: uppercase;
        margin-bottom: 2.5rem;
    }
}

//////////////////////////
// BTN Call to action
.btn {
    font-size: 1.5rem;
    font-weight: 300;
    text-transform: uppercase;
    border-radius: 100px;
    border: none;
    background-image: linear-gradient(to right, var(--color-primary-light), var(--color-primary-dark));
    color: #fff;

    position: relative;
    overflow: hidden; // set up to clip "invisible" overflow above the visible button!!!
    cursor: pointer;

    // as many lines of code are repeating in &:hover &__visible and &:hover &__invisible. You can select all of the child element of .btn by setting below!
    /*  & > * {
        display: inline-block;
        padding: 2rem 7.5rem;
        height: 100%;
        width: 100%;
          transition: all .2s;
          Take only what the same are and delete where you took them from. So that we dont have so many repeted codes!
        */
    &__visible {
        display: inline-block;
        height: 100%;
        width: 100%;
        padding: 2rem 7.5rem;
    }

    &__invisible {
        display: inline-block;
        position: absolute; // position: relative at .btn
        padding: 2rem 0; // setting up the same set of padding height and width with -100% to the top will move the invisible part out of the BG  exactly on the top of visible part. And it goes above the visible part but you can still it. The solution is to go to the parent(btn) and set the overflow: hidden
        height: 100%;
        width: 100%;
        left: 0;
        top: -100%;

        //switching text functionality on the button!
        transition: all .2s;
    }


    &:hover {
        background-image: linear-gradient(to left, var(--color-primary-light), var(--color-primary-dark)); // swing BG from right to left on the hovered state!
    }


    &:hover &__visible {
        transform: translateY(100%); // this transform will translate 100% back to the visible down in Y axis
    }


    &:hover &__invisible {
        top: 0; // moving from top to where is was from -100% to 0% by using transition all in 2s and the visible part goes up by translate
    }

    &:focus { // the same infinitive heartbeat annimation like inline-btn. But they dont share the same class. So you have to set them up in here as well.
        outline: none;
        animation: pulsate 1s infinite;
    }
    // The UI ends here. Next stop responsive design @Media Query
}